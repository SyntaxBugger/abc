--echo command: write into the file and if we echo again, it appends into the file.
--cat command: reads from the file.
--diff command (git diff): this command provides difference between the commited source file and present source file.
--git log: gives a history of different commits done.
--ssh-keygen -o: provides a key/ ID for each commit.
--mkdir: to create a new folder in the present directory. (git mkdir)
--- echo "Creare a new tet file">> myfile.txt 
*** it writes the content in the file plus this command creates a new file too.
--ls: tells the name of the file and folders in the current directory.
--add: 
***git add .(syntax)  
--git show: 
***cd .. : shortcut to go to the previous directory. 
--git restore: restores the deleted files from the respository .
--git rm --cagitched filename: deletes the file from the repository.
--git tag:(git tag -a ver_18_01_2025_1.1 -m "This tag is created on the last major commit"
----basically it makes a cluster of different commits on the file and pushes it collectively.
*** there are two types of tags":
1) Annotated tag-
2) Lightweighted tag-
--git show unique id: gives the details of users.
--git push -u origin <tag_name>: used to push something into the repo.
-- git log -oneline: gives a log of different commits in one line.
--git push origin rangan: pushes the file into the repo.
-- diff -u <filename> <filename2> > changes.patch : used to compare between two files and patches the contents the files to have the same amount of files iin both files.  
-- cat changes.patch: read the changes of the patch.
--branch: it used to make changes to the og code by making an identical copy of the og master branch, now the branch doesn't affect the master branch so you can work easily without effecting the master branch, after you are done with the work, you can merge your branch with the og branch.
--git switch -c <branchname>: creates a new branch;
--git switch <branchname>: switches to an existing branch.
--git switch -d <branchname>: deletes the branch along with all the data in it.
--git commit -m "Hello"
--git merge <new-branchname>: merges the new branch with the current branch.
--if there are files that are  sometimes automatically generated by the application and we dont want them as part of our repo, then we can add them in git ignore file
--How to restore a committed file using checkout command.
--checkout command wiil restore the file changes to the last committed version.
--format for restoring the file is:
**git checkout <filename to be restored>